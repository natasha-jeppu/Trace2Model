name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]


jobs:

  Linux:

    runs-on: ubuntu-latest

    steps:
    
    - uses: actions/checkout@v2

    - name: CBMC dependencies
      run: |
        sudo apt-get install g++ gcc flex bison make git libwww-perl patch
        
    - name: Tool dependencies
      run: |
        sudo apt-get install python3 cvc4 cbmc
    
    - name: Cache cbmc
      id: cache-cbmc
      uses: actions/cache@v1.2.0
      with:
        path: ./cbmc
        key: ${{ runner.os }}-cbmc
      
    - name: CBMC Setup
      if: steps.cache-cbmc.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/diffblue/cbmc.git
        cd cbmc
        git reset --hard 25ba4e6a600b033df7dbaf3d19437afd8b9bdd1c
        make -C src minisat2-download
        make -C src
    
    - name: Add to path
      run: |
        echo "$(pwd)/cbmc/src/cbmc" >> $GITHUB_PATH

    - name: Python modules
      run: |
        sudo apt-get install graphviz libgraphviz-dev pkg-config python3-pip python3-setuptools
        pip3 install numpy pygraphviz transitions termcolor
        
    - name: Setup artifact directory
      run: mkdir -p result_linux
    
    - name: Run benchmarks
      run: |
        python3 run.py -gen_o incr -mt dfa -synth guard > ./result_linux/output.txt
        
    - uses: actions/upload-artifact@v2
      with:
        name: Result_linux
        path: ./result_linux/
        
  OSX:

    runs-on: macos-latest

    steps:

    - name: Cache cbmc
      id: cache-cbmc
      uses: actions/cache@v1.2.0
      with:
        path: ./cbmc
        key: ${{ runner.os }}-cbmc
        
    - uses: actions/checkout@v1

    - name: python3 and cvc4
      if: steps.cache-cbmc.outputs.cache-hit != 'true'
      run: |
        brew install python3
        brew tap cvc4/cvc4
        brew install cvc4/cvc4/cvc4
        
    - name: Python modules
      if: steps.cache-cbmc.outputs.cache-hit != 'true'
      run: |
        brew install graphviz
        pip3 install pygraphviz --install-option="--include-path=/usr/local/Cellar/graphviz/2.44.0/include/graphviz" --install-option="--library-path=/usr/local/Cellar/graphviz/2.44.0/lib"
        pip3 install numpy transitions termcolor

    - name: Setup xcode
      uses: sinoru/actions-setup-xcode@v1.1.1
      with:
        xcode-version: 10.3
        
    - name: cbmc clone
      if: steps.cache-cbmc.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/diffblue/cbmc.git
        cd cbmc
        git reset --hard 25ba4e6a600b033df7dbaf3d19437afd8b9bdd1c
        
    - name: Add to path
      run: |
         echo "$(pwd)/cbmc/src/cbmc" >> $GITHUB_PATH
                
    - name: Setup artifact directory
      run: mkdir -p result_mac
    
    - name: Run benchmarks
      run: |
        python3 run.py -gen_o incr -mt dfa -synth guard > ./result_linux/output.txt
    
    - name: Run incr bench
      run: |
        python3 learn_model.py -i ./benchmarks/Predicate_Synth/TelAviv/java.util.StringTokenizer.txt -t ./result_mac --incr > ./result_mac/incr_bench.txt
        python3 learn_model.py -i ./benchmarks/Predicate_Synth/TelAviv/ssh.net.txt -t ./result_mac --incr >> ./result_mac/incr_bench.txt
    
    - name: Run dfa bench
      run: |
        python3 learn_model.py -i ./benchmarks/Predicate_Synth/SoC/hcd-xhci_slot_withbsr.txt -t ./result_mac --incr --dfa > ./result_mac/dfa_bench.txt
        python3 learn_model.py -i ./benchmarks/Predicate_Synth/SoC/integrator.txt -t ./result_mac --incr --dfa >> ./result_mac/dfa_bench.txt
        
    - uses: actions/upload-artifact@v2
      with:
        name: Result_mac
        path: ./result_mac/
